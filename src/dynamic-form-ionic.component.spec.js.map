{"version":3,"sources":["ui-ionic/src/dynamic-form-ionic.component.spec.ts"],"names":[],"mappings":"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","file":"dynamic-form-ionic.component.spec.js","sourcesContent":["import { TestBed, async, inject, ComponentFixture } from \"@angular/core/testing\";\nimport { DebugElement } from \"@angular/core\";\nimport { ReactiveFormsModule, FormGroup, FormControl } from \"@angular/forms\";\nimport { NoopAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { By } from \"@angular/platform-browser\";\nimport { IonicModule } from \"ionic-angular\";\nimport { TextMaskModule } from \"angular2-text-mask\";\nimport {\n    DynamicFormsCoreModule,\n    DynamicFormService,\n    DynamicCheckboxModel,\n    DynamicCheckboxGroupModel,\n    DynamicDatePickerModel,\n    DynamicEditorModel,\n    DynamicFileUploadModel,\n    DynamicFormArrayModel,\n    DynamicFormControlModel,\n    DynamicFormGroupModel,\n    DynamicInputModel,\n    DynamicRadioGroupModel,\n    DynamicSelectModel,\n    DynamicSliderModel,\n    DynamicSwitchModel,\n    DynamicTextAreaModel,\n    DynamicTimePickerModel\n} from \"@ng2-dynamic-forms/core\";\nimport { DynamicFormIonicComponent, IonicFormControlType } from \"./dynamic-form-ionic.component\";\n\ndescribe(\"DynamicFormIonicComponent test suite\", () => {\n\n    let formModel = [\n            new DynamicCheckboxModel({id: \"checkbox\"}),\n            new DynamicCheckboxGroupModel({id: \"checkboxGroup\", group: []}),\n            new DynamicDatePickerModel({id: \"datepicker\"}),\n            new DynamicEditorModel({id: \"editor\"}),\n            new DynamicFileUploadModel({id: \"upload\", url: \"\"}),\n            new DynamicFormArrayModel({id: \"formArray\", createGroup: () => []}),\n            new DynamicFormGroupModel({id: \"formGroup\", group: []}),\n            new DynamicInputModel({id: \"input\", maxLength: 51}),\n            new DynamicRadioGroupModel({id: \"radioGroup\"}),\n            new DynamicSelectModel({id: \"select\", options: [{value: \"One\"}, {value: \"Two\"}], value: \"One\"}),\n            new DynamicSliderModel({id: \"slider\"}),\n            new DynamicSwitchModel({id: \"switch\"}),\n            new DynamicTextAreaModel({id: \"textarea\"}),\n            new DynamicTimePickerModel({id: \"timepicker\"})\n        ],\n        testModel = formModel[7] as DynamicInputModel,\n        formGroup: FormGroup,\n        fixture: ComponentFixture<DynamicFormIonicComponent>,\n        component: DynamicFormIonicComponent,\n        debugElement: DebugElement,\n        testElement: DebugElement;\n    /*\n    beforeEach(async(() => {\n\n        TestBed.configureTestingModule({\n\n            imports: [\n                ReactiveFormsModule,\n                NoopAnimationsModule,\n                IonicModule,\n                TextMaskModule,\n                DynamicFormsCoreModule.forRoot()\n            ],\n            declarations: [DynamicFormIonicComponent]\n\n        }).compileComponents().then(() => {\n\n            fixture = TestBed.createComponent(DynamicFormIonicComponent);\n\n            component = fixture.componentInstance;\n            debugElement = fixture.debugElement;\n        });\n    }));\n\n    beforeEach(inject([DynamicFormService], (service: DynamicFormService) => {\n\n        formGroup = service.createFormGroup(formModel);\n\n        component.group = formGroup;\n        component.model = testModel;\n\n        fixture.detectChanges();\n\n        testElement = debugElement.query(By.css(`input[id='${testModel.id}']`));\n    }));\n    */\n    xit(\"should initialize correctly\", () => {\n\n        expect(component.context).toBeNull();\n        expect(component.control instanceof FormControl).toBe(true);\n        expect(component.group instanceof FormGroup).toBe(true);\n        expect(component.model instanceof DynamicFormControlModel).toBe(true);\n        expect(component.hasErrorMessaging).toBe(false);\n\n        expect(component.onControlValueChanges).toBeDefined();\n        expect(component.onModelDisabledUpdates).toBeDefined();\n        expect(component.onModelValueUpdates).toBeDefined();\n\n        expect(component.blur).toBeDefined();\n        expect(component.change).toBeDefined();\n        expect(component.focus).toBeDefined();\n\n        expect(component.onValueChange).toBeDefined();\n        expect(component.onFocusChange).toBeDefined();\n\n        expect(component.isValid).toBe(true);\n        expect(component.isInvalid).toBe(false);\n        expect(component.showErrorMessages).toBe(false);\n\n        expect(component.type).toEqual(IonicFormControlType.Input);\n    });\n\n    xit(\"should have an input element\", () => {\n\n        expect(testElement instanceof DebugElement).toBe(true);\n    });\n\n    xit(\"should listen to native focus and blur events\", () => {\n\n        spyOn(component, \"onFocusChange\");\n\n        testElement.triggerEventHandler(\"focus\", null);\n        testElement.triggerEventHandler(\"blur\", null);\n\n        expect(component.onFocusChange).toHaveBeenCalledTimes(2);\n    });\n\n    xit(\"should listen to native change event\", () => {\n\n        spyOn(component, \"onValueChange\");\n\n        testElement.triggerEventHandler(\"change\", null);\n\n        expect(component.onValueChange).toHaveBeenCalled();\n    });\n\n    xit(\"should update model value when control value changes\", () => {\n\n        spyOn(component, \"onControlValueChanges\");\n\n        component.ngOnInit();\n\n        component.control.setValue(\"test\");\n\n        expect(component.onControlValueChanges).toHaveBeenCalled();\n    });\n\n    xit(\"should update control value when model value changes\", () => {\n\n        spyOn(component, \"onModelValueUpdates\");\n\n        component.ngOnInit();\n\n        testModel.valueUpdates.next(\"test\");\n\n        expect(component.onModelValueUpdates).toHaveBeenCalled();\n    });\n\n    xit(\"should update control activation when model disabled property changes\", () => {\n\n        spyOn(component, \"onModelDisabledUpdates\");\n\n        component.ngOnInit();\n\n        testModel.disabledUpdates.next(true);\n\n        expect(component.onModelDisabledUpdates).toHaveBeenCalled();\n    });\n\n    it(\"should determine correct form control type\", () => {\n\n        let testFn = DynamicFormIonicComponent.getFormControlType;\n\n        expect(testFn(formModel[0])).toEqual(IonicFormControlType.Checkbox);\n\n        expect(testFn(formModel[1])).toEqual(IonicFormControlType.Group);\n\n        expect(testFn(formModel[2])).toEqual(IonicFormControlType.DateTime);\n\n        expect(testFn(formModel[3])).toBeNull();\n\n        expect(testFn(formModel[4])).toBeNull();\n\n        expect(testFn(formModel[5])).toEqual(IonicFormControlType.Array);\n\n        expect(testFn(formModel[6])).toEqual(IonicFormControlType.Group);\n\n        expect(testFn(formModel[7])).toEqual(IonicFormControlType.Input);\n\n        expect(testFn(formModel[8])).toEqual(IonicFormControlType.RadioGroup);\n\n        expect(testFn(formModel[9])).toEqual(IonicFormControlType.Select);\n\n        expect(testFn(formModel[10])).toEqual(IonicFormControlType.Range);\n\n        expect(testFn(formModel[11])).toEqual(IonicFormControlType.Toggle);\n\n        expect(testFn(formModel[12])).toEqual(IonicFormControlType.TextArea);\n\n        expect(testFn(formModel[13])).toEqual(IonicFormControlType.DateTime);\n    });\n});"]}